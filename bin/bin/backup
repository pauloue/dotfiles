#!/usr/bin/env bash
#
# Backup home folder to $BACKUP_DIR/$DEST, keeping incremental old backups
# Excludes files that match the exclude patterns in $BACKUP_DIR/exclude
# 'backup restore' restores the most recent backup to the home folder

set -e

BACKUP_DIR=/run/media/paul/Elements/backups
DEST=backup-$(date +%F)

case $1 in
    "" ) action="backup" ;;
    restore ) action="restore" ;;
    * ) echo "Error: Invalid option '$1'"; exit 1 ;;
esac

if [[ -d $BACKUP_DIR ]]; then cd $BACKUP_DIR
else
    echo "Error: $BACKUP_DIR: No such file or directory"; exit 1
fi

# works? clean?
if [[ -f last-backup ]]; then
    lastBackup=$(< last-backup)
else
    lastBackup=$DEST
fi

backup() {
    echo -e "Backing up $HOME to $BACKUP_DIR/$DEST\n"
    # works? clean?
    if [[ $lastBackup != $DEST ]]; then
        mv $lastBackup $DEST
    fi
    if [[ -f $BACKUP_DIR/exclude ]]; then
        exclude="--exclude-from=exclude"
    fi
    if [[ $lastBackup != $DEST ]]; then
        backup="-b --backup-dir=$lastBackup"
    fi
    rsync -azh --del $exclude --delete-excluded $backup --info=progress2,stats \
        $HOME/ $DEST
    echo $DEST > last-backup
    read -p "Enter a description for the backup: " desc
    # press enter to cancel..
    echo $desc > $(cat last-backup)/backup-info
}
restore() {
    if [[ -d $lastBackup ]]; then
        echo -e "Restoring $BACKUP_DIR/$lastBackup to $HOME/$lastBackup\n"
        rsync -azh --del --info=progress2,stats $lastBackup $HOME
    else
        echo "Error: Backup not found"; exit 1
    fi
}

if [[ $action == "backup" ]]; then
    backup
elif [[ $action == "restore" ]]; then
    restore
fi
