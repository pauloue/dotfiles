#!/usr/bin/env bash
#
# Backup home folder to $BACKUP_DIR/$DEST, keeping incremental old backups
# Excludes files that match the exclude patterns in $BACKUP_DIR/exclude
# 'backup restore' restores the most recent backup to the home folder

set -e

BACKUP_DIR="/run/media/paul/Elements/backups"
DEST="backup-$(date +%F)"

case $1 in
    "" ) action="backup" ;;
    restore ) action="restore" ;;
    * ) echo "Error: Invalid option '$1'"; exit 1 ;;
esac

if [[ -d $BACKUP_DIR ]]; then cd $BACKUP_DIR
else
    echo "Error: $BACKUP_DIR: No such file or directory"; exit 1
fi

[[ -f last-backup ]] && lastBackup="$(< last-backup)"

backup() {
    read -rp "Enter a description for the backup: " desc
    echo "Backing up $HOME to $BACKUP_DIR/$DEST"
    if [[ $lastBackup && $lastBackup != "$DEST" ]]; then
        mv "$lastBackup" "$DEST"
        backup="-b --backup-dir=../$lastBackup"
    fi
    [[ -f $BACKUP_DIR/exclude ]] && exclude="--exclude-from=exclude"
    rsync -azh $exclude $backup --info=progress2,stats "$HOME/" "$DEST"
    [[ "$desc" ]] && echo "$desc" > "$DEST/backup-info"
    echo "$DEST" > last-backup
}

restore() {
    if [[ -d $lastBackup ]]; then
        echo "Restoring $BACKUP_DIR/$lastBackup to $HOME/$lastBackup"
        rsync -azh --del --info=progress2,stats "$lastBackup" "$HOME"
    else
        echo "Error: Backup not found"; exit 1
    fi
}

if [[ $action == "backup" ]]; then
    backup
elif [[ $action == "restore" ]]; then
    restore
fi
